<?php
/**
 * Created by PhpStorm.
 * User: DRAGON
 * Date: 5/4/2019
 * Time: 1:31 AM
 */

class ProductItem_model extends MY_Model
{
    public $table = 'productitem';

    public function __construct()
    {
        parent::__construct();
    }

    function productItem_load($url)
    {
        $response = etsyApi_makeRequest($url, false);
        $result = json_decode($response['curlResult'], true);
        if($result) return $result['results'];
        return false;
    }

    function productItemSave($row)
    {
        $item_num = $row->item_num;
        $rvt_val = null;

        $url ='https://openapi.etsy.com/v2/listings/active?api_key=5nuye4b6qyaf43za5psqv4db';
        $url .='&fields=category_id,listing_id,title,price,currency_code,url,category_path&state=active&keywords='.$row->keyword;
        $url = str_replace(" ","%20",$url);
        $offset = $row->item_num;
        $url .= '&limit=100'.'&offset='.strval($offset);
        if($offset < 16000) {
            $datatemp = $this->productItem_load($url);
            $tb = str_replace(" ", "_", $row->keyword);

            $data = [];
            if ($datatemp) {
                foreach ($datatemp as $temp) {
                    if ($temp) {
                        $catergory_name = implode(" > ", $temp['category_path']);
                        $data[] = array(
                            'category_id' => $temp['category_id'],
                            'category_name' => $catergory_name,
                            'listing_id' => $temp['listing_id'],
                            'title' => $temp['title'],
                            'price' => $temp['price'],
                            'currency_code' => $temp['currency_code'],
                            'url' => $temp['url'],
                        );
                    }
                }
                if (count($data) > 0) {
                    $tb .= "_item";
                    $this->db->insert_batch($tb, $data);
                    $rvt_val = array(
                        'item_num' => $item_num + count($data),
                        'status' => 'downloading'
                    );
                }
            } else {
                $rvt_val = array(
                    'status' => 'complete'
                );
            }
        }
        else{
            $rvt_val = array(
                'status' => 'complete'
            );
        }

        return $rvt_val;
    }

    public function getSaleQuantity($listingId, $b_date, $e_date)
    {
        $this->db->select('realtime.quantity');
        $this->db->from('realtime');
        $this->db->where('realtime.listing_id=', $listingId);
        $this->db->where('realtime.datetime >=', $b_date);
        $this->db->where('realtime.datetime <=', $e_date);
        $this->db->order_by('datetime ASC');
        $this->db->group_by('datetime');
        $query = $this->db->get();
        $result = $query->result();

        $quantity = 0;
        $temp=0;
        $count = 0;
        foreach ($result as $row)
        {
            if($count == 0) {
                $temp = $row->quantity;
            }
            else{
                $salecount = $temp-$row->quantity;
                if($salecount > 0)$quantity += $salecount;
                $temp = $row->quantity;
            }
            $count++;
        }
        return $quantity;
    }

    public function getItem($keywordId, $topItem, $subItem, $subsubItem)
    {
        $tb = $this->Reservation_model->getkeyword($keywordId);
        $tb = $tb->keyword;
        $tb = str_replace(" ","_", $tb);
        $tb.="_item";
        $this->db->select($tb.".*");
        $this->db->from($tb);
        $this->db->where($tb.".title != ''");
        if($topItem !='0' && $subItem == '0' && $subsubItem == '0')
            $this->db->like("'".$tb.".category_name'", $topItem, 'after');
        else if($subItem != '0' && $subsubItem == '0')
            $this->db->like("'".$tb.".category_name'", $subItem, 'after');
        else if($subsubItem != '0')$this->db->where("'".$tb.".category_name'", $subsubItem);
        $this->db->order_by($tb.".title", 'ASC');
        $this->db->group_by($tb.".listing_id");
        $query = $this->db->get();
        return $query;
    }

    public function delete($columnName, $id)
    {
        return parent::delete($columnName, $id); // TODO: Change the autogenerated stub
    }

    public function getItemTitle($listingId)
    {
        $this->db->select('productitem.title');
        $this->db->from('productitem');
        $this->db->where('productitem.listing_id = ', $listingId);
        $query = $this->db->get();
        $result = $query->result();
        foreach ($result as $row)
        {
            return $row->title;
        }
        return true;
    }

    public function getSaleProfit($listingId, $b_date, $e_date)
    {
        $this->db->select('realtime.quantity');
        $this->db->from('realtime');
        $this->db->where('realtime.listing_id=', $listingId);
        $this->db->where('realtime.datetime >=', $b_date);
        $this->db->where('realtime.datetime <=', $e_date);
        $this->db->order_by('datetime ASC');
        $this->db->group_by('datetime');
        $query = $this->db->get();
        $result = $query->result();

        $quantity = 0;
        $temp=0;
        $count = 0;
        foreach ($result as $row)
        {
            if($count == 0) {
                $temp = $row->quantity;
            }
            else{
                $salecount = $temp-$row->quantity;
                if($salecount > 0)$quantity += $salecount;
                $temp = $row->quantity;
            }
            $count++;
        }

        $profit = '';
        $price = null;
        $row = $this->getProductItem($listingId);
        if($row->currency_code != 'USD') {
            $price = $this->USD_change_model->get_rate($row->currency_code)*$row->price;
        }
        else $price = $row->price;
        if ($quantity > 0) $profit = round(((0.906 * $price) - 0.5) * $quantity,2);

        return $profit;
    }

    public function getProductItem($listingId)
    {
        $this->db->select("productitem.price, productitem.currency_code");
        $this->db->from('productitem');
        $this->db->where('productitem.listing_id=', $listingId);
        $query = $this->db->get();
        $result = $query->result();
        foreach ($result as $row)
        {
            return $row;
        }
        return false;
    }
}