<?php
/**
 * Created by PhpStorm.
 * User: DRAGON
 * Date: 5/2/2019
 * Time: 4:14 PM
 */

class Reservation_model extends MY_Model
{
    public $table = 'reservation';

    public function __construct()
    {
        parent::__construct();
    }

    public function data_list()
    {
        $this->db->select('reservation.*');
        $this->db->from('reservation');
        $this->db->group_by('reservation.keyword,reservation.b_date');
        $this->db->order_by('reservation.e_date', 'DESC');
        $query = $this->db->get();
        $result = $query->result();
        return $result;
    }

    public function data_search($val)
    {
        $result = $this->getBy('keyword', $val['keyword']);
        if($result) {
            if($result->e_date <= $val['e_date'])
            {
                $va['e_date'] = $val['e_date'];
                $va['keyword'] = $val['keyword'];
                $this->data_update($result->id, $va);
            }
        }
        else $this->add($val);
        return true;
    }

    public function data_update($id, $val)
    {
        $this->update($id, $val);
        return true;
    }

    public function getkeyword($id)
    {
        $this->db->select('reservation.keyword, reservation.id, reservation.b_date, reservation.e_date');
        $this->db->from('reservation');
        if($id) {
            $this->db->where('reservation.id=', $id);
        }
        $this->db->where('reservation.status=','complete');
        $this->db->order_by('reservation.keyword','ASC');
        $query = $this->db->get();
        $result = $query->result();

        if($id){
            foreach ($result as $row) {
                return $row;
            }
        }
        else return $result;
    }

    public function add($val)
    {
        $data = array(
            'b_date'=>$val['b_date'],
            'e_date'=>$val['e_date'],
            'keyword'=>$val['keyword'],
            'status'=>'',
            'item_num'=>0
        );
       if($this->create($data)) {
           $this->db->select('reservation.id, reservation.b_date, reservation.e_date, reservation.keyword, reservation.item_num');
           $this->db->from('reservation');
           $this->db->where('reservation.b_date=',$val['b_date']);
           $this->db->where('reservation.e_date=',$val['e_date']);
           $this->db->where('reservation.keyword=',$val['keyword']);
           $query = $this->db->get();
           $result = $query->result();

           $tb = str_replace(" ","_",$val['keyword']);
           $tbname = $tb.'_item';
           $checktb = "SHOW TABLES LIKE '$tbname'";
           if(count($this->db->query($checktb)->result()) == 0) {
               $creattable = "CREATE TABLE IF NOT EXISTS " . $tb . "_item(
                                `id` int (11) NOT NULL AUTO_INCREMENT,
                                `category_id` int (11),
                                `category_name` text ,
                                `listing_id` int (11),
                                `title` text ,
                                `price` text ,
                                `currency_code` text ,
                                `url` text,
                                 PRIMARY KEY (`id`)
                           ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8 COLLATE = utf8_general_ci ";
               $this->db->query($creattable);
               foreach ($result as $row) {
                   $val = $this->ProductItem_model->productItemSave($row);
                   $this->data_update($row->id, $val);
                   return true;
               }
           }
           else
           {
               $this->db->select($tbname.".id");
               $this->db->from($tbname);
               $query1 = $this->db->get();
               $val = array(
                   'item_num' => $query1->num_rows(),
                   'status'=>'downloading'
               );
               foreach ($result as $row)
               {
                   $this->update($row->id, $val);
               }
           }
       }
       else return false;
    }

    public function delete($columnName, $id)
    {
        $this->ProductItem_model->delete('reservationId',$id);
        return parent::delete($columnName, $id); // TODO: Change the autogenerated stub
    }
}